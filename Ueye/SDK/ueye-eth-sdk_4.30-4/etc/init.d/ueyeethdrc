#!/bin/sh

### BEGIN INIT INFO
# Provides:     ueyeethdrc
# Required-Start:   $network $local_fs
# Required-Stop:    $network $local_fs
# Default-Start:    2 3 4 5
# Default-Stop:     0 1 6
# Short-Description:    Control the GigE uEye Linux daemon
### END INIT INFO

# chkconfig: 2345 20 80
# description: Control the GigE uEye Linux daemon 

# Return codes
# 0: Success
# 1: Error creating daemon run directory
# 2: Daemon is already running
# 3:
# 4: Daemon did not terminate
# 5: No pidfile found

N=/etc/init.d/ueyeethdrc

# RC settings
# daemon run directory - this is where the daemon will create its PID file and sockets
RUNDIR="/var/run/ueyed"
# PID file name
PIDFILE="ueyeethd.pid"
# where to find ueyed
DAEMON_BINDIR="/usr/local/share/ueye/ueyeethd"
# daemon name
DAEMON="ueyeethd"
# daemon user name
DAEMON_USER="ueyed"
# daemon group
DAEMON_GROUP="ueye"
# daemon configuration file
DAEMON_CONF="${DAEMON_BINDIR}/ueyeethd.conf"
# daemon terminate wait time
TERMINATEWAIT=3

# Ethernet tuning options
# Number of packets in the kernel packet queue
ETH_PACKET_BACKLOG=10000
# Kernel network packet memory
ETH_PACKET_MEMORY=8388608

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:"${DAEMON_BINDIR}"
DAEMONSTATUS=-1

# Check daemon status
checkdaemonstatus()
{
    if [ -e "${RUNDIR}/${PIDFILE}" ]
    then
        if [ -d /proc/$(cat ${RUNDIR}/${PIDFILE}) ]
        then
            DAEMONSTATUS=0
        else
            DAEMONSTATUS=1
        fi
    else
        DAEMONSTATUS=2
    fi
}

# Check daemon status
printdaemonstatus()
{
	checkdaemonstatus
	case "${DAEMONSTATUS}" in
		0)
			echo "${DAEMON} is running.";
		;;
		1)
			echo "${DAEMON} is not running but pidfile exists."
		;;
		2)
			echo "${DAEMON} is not running."
		;;
		*)
		;;
	esac
}

# clean up orphaned files
cleanup()
{
	rm -f ${RUNDIR}/*eth*
}

# Tune ethernet interface settings
# This is required in order to ensure minimum packet loss in high bandwidth operation mode:
# Increase the number of queued ethernet packets and provide more packet memory to the
# network stack. See man sysctl and kernel documentation for details.
tune_ethif()
{
    sysctl -w net.core.netdev_max_backlog=${ETH_PACKET_BACKLOG} > /dev/null
    sysctl -w net.core.rmem_max=${ETH_PACKET_MEMORY} > /dev/null
    sysctl -w net.core.rmem_default=${ETH_PACKET_MEMORY} > /dev/null
}

# Print an error message and exit
# Usage: errmsg message return-code
errmsg()
{
    echo ${1} >&2
    exit ${2}
}

# Runlevel control
case "${1}" in
  start)
  	# daemon startup - tune ethernet settings, clean orphaned sockets that may persist after
  	# unclean daemon shutdown
    echo -n "Starting ${DAEMON}... "
    tune_ethif
    # create run directory (some distributions may have it on a ramdisk)
    if [ ! -d "${RUNDIR}" ] 
    then
    	mkdir -p "${RUNDIR}" > /dev/null 2>&1 || errmsg "Runtime directory doesn't exist and cannot be created." 1
    	chown ${DAEMON_USER}:${DAEMON_GROUP} "${RUNDIR}"
	fi
    # Refuse to start if a PID file exists
    checkdaemonstatus
    case "${DAEMONSTATUS}" in 
    	0) # the daemon is already running
    	errmsg "${DAEMON} is already running." 2
    	;;
		1) # daemon is not running, but there is a PID file
    	cleanup
    	;;
    	2) # daemon is not running
    	cleanup
    	;;
	esac
    # start the daemon
    /usr/bin/taskset -c 0 "${DAEMON_BINDIR}/${DAEMON}" -c "${DAEMON_CONF}" -P "${RUNDIR}/${PIDFILE}"
    sleep 1
    printdaemonstatus
    ;;
  stop)
    echo -n "Stopping ueyed... "
    checkdaemonstatus
    case "${DAEMONSTATUS}" in 
    	0)
    	# the daemon is running
	    kill -TERM $(cat ${RUNDIR}/${PIDFILE})
	    echo -n "Waiting ${TERMINATEWAIT}s for ${DAEMON} to terminate... "
	    sleep ${TERMINATEWAIT}
	    checkdaemonstatus
	    if [ ${DAEMONSTATUS} -eq 0 ]
	    then
	    	errmsg "${DAEMON} is still running. Check the system log for more information. One may force termination by calling \"${0} force-stop\"." 4
		fi
		;;
    	1)
    	# daemon is not running, but there is a PID file
    	cleanup
    	;;
    	2)
    	# daemon is not running
    	errmsg "No pidfile found. Cannot stop ${DAEMON}" 5
    	;;
	esac
    echo "Stopped ${DAEMON}."
    ;;
  force-stop)
    echo -n "Killing ${DAEMON}... "
    if [ -e ${RUNDIR}/${PIDFILE} ]
    then
    	PID=$(cat ${RUNDIR}/${PIDFILE})
        cleanup
        kill -KILL ${PID} > /dev/null 2>&1 
        echo "Done."
    else
        cleanup
        errmsg "No pidfile found. Cannot stop ${DAEMON}" 5
    fi
    ;;
  restart)
    if ${0} stop
    then
    	${0} start
	fi
    ;;
  status)
    printdaemonstatus
    ;;
  ethinfo)
    sysctl -q net.core.netdev_max_backlog
    sysctl -q net.core.rmem_max
    sysctl -q net.core.rmem_default
    netstat -su 2> /dev/null
    ;;
  *)
    echo "Usage: $N {start|stop|force-stop|restart|status|ethinfo}" >&2
    exit 1
    ;;
esac

exit 0
