#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Thu Sep  2 13:20:57 2010

import wx
from floatcombo import FloatCombo,EVT_FLOATCOMBO
import ueye
# begin wxGlade: extracode
# end wxGlade



class wxVidConfig(wx.Dialog):
    def __init__(self, *args, **kwds):
        
        self.cam=kwds.pop("cam",None)
        
        # begin wxGlade: wxVidConfig.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook = wx.Notebook(self, -1, style=0)
        self.nbES = wx.Panel(self.notebook, -1)
        self.nbProcIm = wx.Panel(self.notebook, -1)
        self.nbTamano = wx.Panel(self.notebook, -1)
        self.nbImagen = wx.Panel(self.notebook, -1)
        self.nbCamara = wx.Panel(self.notebook, -1)
        self.sizer_8_staticbox = wx.StaticBox(self.nbCamara, -1, "Framerate")
        self.sizer_9_staticbox = wx.StaticBox(self.nbCamara, -1, "Exposure")
        self.sizer_4_staticbox = wx.StaticBox(self.nbImagen, -1, "Master Gain")
        self.sizer_10_staticbox = wx.StaticBox(self.nbImagen, -1, "Black Level")
        self.sizer_15_staticbox = wx.StaticBox(self.nbImagen, -1, "Features")
        self.sizer_22_staticbox = wx.StaticBox(self.nbImagen, -1, "Pixel Format")
        self.sizer_17_staticbox = wx.StaticBox(self.nbTamano, -1, "AOI")
        self.sizer_21_staticbox = wx.StaticBox(self.nbTamano, -1, "Horizontal Format")
        self.sizer_21_copy_staticbox = wx.StaticBox(self.nbTamano, -1, "Vertical Format")
        self.sizer_24_staticbox = wx.StaticBox(self.nbProcIm, -1, "Test Images")
        self.sizer_28_staticbox = wx.StaticBox(self.nbES, -1, "Input")
        self.sizer_34_staticbox = wx.StaticBox(self.nbES, -1, "Output")
        self.sizer_30_staticbox = wx.StaticBox(self.nbES, -1, "Eeprom")
        self.sizer_7_staticbox = wx.StaticBox(self.nbCamara, -1, "PixelClock")
        self.fcPixelClock = FloatCombo(self.nbCamara, -1)
        self.fcFrameRate = FloatCombo(self.nbCamara, -1)
        self.cbAutoFr = wx.CheckBox(self.nbCamara, -1, "Auto")
        self.fcExpo = FloatCombo(self.nbCamara, -1)
        self.cbAutoExp = wx.CheckBox(self.nbCamara, -1, "Auto")
        self.fcMasterGain = FloatCombo(self.nbImagen, -1)
        self.cbAutoMG = wx.CheckBox(self.nbImagen, -1, "Auto")
        self.cbGBMG = wx.CheckBox(self.nbImagen, -1, "Gain boost")
        self.fcBlackLevel = FloatCombo(self.nbImagen, -1)
        self.cbAutoBL = wx.CheckBox(self.nbImagen, -1, "Auto")
        self.label_1 = wx.StaticText(self.nbImagen, -1, "Reg Gain")
        self.label_2 = wx.StaticText(self.nbImagen, -1, "Green Gain")
        self.label_3 = wx.StaticText(self.nbImagen, -1, "Blue Gain")
        self.fcRedGain = FloatCombo(self.nbImagen, -1)
        self.fcGreenGain = FloatCombo(self.nbImagen, -1)
        self.fcBlueGain = FloatCombo(self.nbImagen, -1)
        self.cbSoftGamma = wx.CheckBox(self.nbImagen, -1, "Software gamma (1.8)")
        self.cbHardGamma = wx.CheckBox(self.nbImagen, -1, "Hardware gamma")
        self.cbHotPixCor = wx.CheckBox(self.nbImagen, -1, "Hotpixel correction")
        self.rbEdgeEnh = wx.RadioBox(self.nbImagen, -1, "Edge enhacement", choices=["Disabled", "Weak", "Strong"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.radio_box_2 = wx.RadioBox(self.nbImagen, -1, "", choices=["Software", "Hardware"], majorDimension=2, style=wx.RA_SPECIFY_COLS)
        self.cbPixFormat = wx.ComboBox(self.nbImagen, -1, choices=["Direct raw data (Y8)", "Gray (8)", "RGB16", "RGB24", "RGB32"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.label_4 = wx.StaticText(self.nbTamano, -1, "Width")
        self.label_5 = wx.StaticText(self.nbTamano, -1, "Height")
        self.label_6 = wx.StaticText(self.nbTamano, -1, "Left")
        self.label_7 = wx.StaticText(self.nbTamano, -1, "Right")
        self.fcAOIw = FloatCombo(self.nbTamano, -1)
        self.fcAOIh = FloatCombo(self.nbTamano, -1)
        self.fcAOIl = FloatCombo(self.nbTamano, -1)
        self.fcAOIr = FloatCombo(self.nbTamano, -1)
        self.cbHFM = wx.CheckBox(self.nbTamano, -1, "Mirror left/right")
        self.rbHFBin = wx.RadioBox(self.nbTamano, -1, "Binning", choices=["None", "2x", "3x", "4x", "5x", "6x", "8x"], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
        self.rbHFSub = wx.RadioBox(self.nbTamano, -1, "Subsampling (C)", choices=["None", "2x", "3x", "4x", "5x", "6x", "8x", "16x"], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
        self.cbVFM = wx.CheckBox(self.nbTamano, -1, "Mirror left/right")
        self.rbVFBin = wx.RadioBox(self.nbTamano, -1, "Binning", choices=["None", "2x", "3x", "4x", "5x", "6x", "8x"], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
        self.rbVFSub = wx.RadioBox(self.nbTamano, -1, "Subsampling (C)", choices=["None", "2x", "3x", "4x", "5x", "6x", "8x", "16x"], majorDimension=2, style=wx.RA_SPECIFY_ROWS)
        self.radio_box_1 = wx.RadioBox(self.nbProcIm, -1, "IR color filter correction", choices=["Off", "Normal", "BG40", "HQ"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.radio_box_3 = wx.RadioBox(self.nbProcIm, -1, "Whitebalance", choices=["Disabled", "One Shot", "Auto"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
        self.combo_box_2 = wx.ComboBox(self.nbProcIm, -1, choices=["TEST_IMAGE_NONE", "TEST_IMAGE_WHITE", "TEST_IMAGE_BLACK", "TEST_IMAGE_ALTERNATE_PATTERN"], style=wx.CB_DROPDOWN|wx.CB_READONLY)
        self.button_1 = wx.Button(self.nbES, -1, "Poll Status")
        self.button_2 = wx.ToggleButton(self.nbES, -1, "button_2")
        self.label_8 = wx.StaticText(self.nbES, -1, "Trigger delay")
        self.window_1 = FloatCombo(self.nbES, -1)
        self.checkbox_1 = wx.CheckBox(self.nbES, -1, "checkbox_1")
        self.radio_box_4 = wx.RadioBox(self.nbES, -1, "FlashOutput", choices=["Off", "Constant high", "Constant low", "Flash High Active", "Flash Low Active"], majorDimension=2, style=wx.RA_SPECIFY_COLS)
        self.button_3 = wx.Button(self.nbES, -1, "Global Exposure Window")
        self.label_9 = wx.StaticText(self.nbES, -1, "Flash delay")
        self.window_1_copy = FloatCombo(self.nbES, -1)
        self.label_10 = wx.StaticText(self.nbES, -1, "Duration")
        self.window_1_copy_1 = FloatCombo(self.nbES, -1)
        self.text_ctrl_1 = wx.TextCtrl(self.nbES, -1, "")
        self.button_4 = wx.Button(self.nbES, -1, "Write")
        self.button_5 = wx.Button(self.nbES, -1, "Clear")
        self.btnOK = wx.Button(self, wx.ID_OK, "")
        self.btnCancel = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.OnAutoExpo, self.cbAutoExp)
        self.Bind(wx.EVT_CHECKBOX, self.OnMGAuto, self.cbAutoMG)
        self.Bind(wx.EVT_CHECKBOX, self.OnMGGB, self.cbGBMG)
        self.Bind(wx.EVT_CHECKBOX, self.OnBLAuto, self.cbAutoBL)
        self.Bind(wx.EVT_CHECKBOX, self.OnSoftGamma, self.cbSoftGamma)
        self.Bind(wx.EVT_CHECKBOX, self.OnHardGamma, self.cbHardGamma)
        self.Bind(wx.EVT_CHECKBOX, self.OnHotPixCor, self.cbHotPixCor)
        self.Bind(wx.EVT_RADIOBOX, self.OnEdgeEn, self.rbEdgeEnh)
        # end wxGlade
        
        
        self.Bind(EVT_FLOATCOMBO, self.OnChangePC, self.fcPixelClock )
        self.Bind(EVT_FLOATCOMBO, self.OnChangeFR, self.fcFrameRate  )
        self.Bind(EVT_FLOATCOMBO, self.OnChangeEx, self.fcExpo )
        self.Bind(EVT_FLOATCOMBO, self.OnChangeBL, self.fcBlackLevel )
        
        
        self.Bind(EVT_FLOATCOMBO, self.OnChangeMG, self.fcMasterGain)
        
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.fcPixelClock.units="MHz"
        self.fcFrameRate.units="fps"
        self.fcExpo.units="ms"
        
        self.fcBlackLevel.SetMin(0)
        self.fcMasterGain.SetMin(0)
        self.fcRedGain.SetMin(0)
        self.fcGreenGain.SetMin(0)
        self.fcBlueGain.SetMin(0)
        
        self.fcBlackLevel.SetMax(255)
        self.fcMasterGain.SetMax(100)
        self.fcRedGain.SetMax(100)
        self.fcGreenGain.SetMax(100)
        self.fcBlueGain.SetMax(100)
        
        self.fcBlackLevel.SetSteps(255)
        self.fcMasterGain.SetSteps(100)
        self.fcRedGain.SetSteps(100)
        self.fcGreenGain.SetSteps(100)
        self.fcBlueGain.SetSteps(100)
        
        self.fcBlackLevel.SetValue(0)
        self.fcMasterGain.SetValue(0)
        self.fcRedGain.SetValue(0)
        self.fcGreenGain.SetValue(0)
        self.fcBlueGain.SetValue(0)
        
        self.__get_cam_info()
        self.__check_properties()
        
    def __get_cam_info(self):
        
        pnMin, pnMax=self.cam.GetPixelClockRange()
        self.fcPixelClock.SetMin(pnMin)
        self.fcPixelClock.SetMax(pnMax)
        rv=self.cam.SetPixelClock(ueye.GET_PIXEL_CLOCK)
        self.fcPixelClock.SetValue(rv)

        pnMin, pnMax,interv=self.cam.GetFrameTimeRange()
        self.fcFrameRate.SetMin(1/pnMax)
        self.fcFrameRate.SetMax(1/pnMin)
        self.fcFrameRate.SetSteps(1000*int((pnMax-pnMin)/interv))
        
        rv=self.cam.SetFrameRate(ueye.GET_FRAMERATE)
        self.fcFrameRate.SetValue(rv)
    
        pnMin, pnMax,interv=self.cam.GetExposureRange()
        self.fcExpo.SetMin(pnMin)
        self.fcExpo.SetMax(pnMax)
        self.fcExpo.SetSteps(int((pnMax-pnMin)/interv))
        rv=self.cam.SetExposureTime(ueye.GET_EXPOSURE_TIME)
        self.fcExpo.SetValue(rv)
        
    
    def __check_properties(self):
        """Check what configuration parameters are available for the cam
        and enable/disable in the configuration window. Also configure 
        the widgets that need to know the size of the detector
        """
         
        #self.SensorID=sInfo.SensorID            # e.g. IS_SENSOR_UI224X_C
        #self.strSensorName=<char*>sInfo.strSensorName  # e.g. "UI-224X-C"
        #self.nColorMode=sInfo.nColorMode        # e.g. IS_COLORMODE_BAYER
        #self.nMaxWidth=sInfo.nMaxWidth          # e.g. 1280
        #self.nMaxHeight=sInfo.nMaxHeight        # e.g. 1024
        self.fcAOIw.SetMax(self.cam.nMaxWidth)
        self.fcAOIw.SetSteps(self.cam.nMaxWidth)
        self.fcAOIw.SetValue(self.cam.nMaxWidth)
        
        self.fcAOIh.SetMax(self.cam.nMaxHeight)
        self.fcAOIh.SetSteps(self.cam.nMaxHeight)
        self.fcAOIh.SetValue(self.cam.nMaxHeight)
        
        self.fcAOIl.SetMax(0)
        self.fcAOIr.SetMax(0)
        self.fcAOIl.Disable()
        self.fcAOIr.Disable()
        
        #Check for gains and update the value to the widget 
        
        if self.cam.bMasterGain: 
            self.fcMasterGain.Enable()
            rv=self.cam.SetHardwareGain(ueye.GET_MASTER_GAIN, 0,0,0)
            self.fcMasterGain.SetValue(rv)
        else: self.fcMasterGain.Disable()
        
        if self.cam.bRGain: self.fcRedGain.Enable()
        else: self.fcRedGain.Disable()
        
        if self.cam.bGGain: self.fcGreenGain.Enable()
        else: self.fcGreenGain.Disable()
        
        if self.cam.bBGain: self.fcBlueGain.Enable()
        else: self.fcBlueGain.Disable()
        
        ##Check for gain boost support
        if self.cam.SetGainBoost(ueye.GET_SUPPORTED_GAINBOOST):
            self.cbGBMG.Enable()
            rv=self.cam.SetGainBoost(ueye.GET_GAINBOOST)
            self.cbGBMG.SetValue(rv)
        else: self.cbGBMG.Disable()
        
        ##Read Autogain. Needs to check if it is autogain, or auto_sensor_gain
        rv=self.cam.SetAutoParameter(ueye.GET_ENABLE_AUTO_GAIN,0,0)[0]
        self.cbAutoMG.SetValue(bool(rv))
        
        
        #Blacklevel
        
        #self.cam.SetBlCompensation(ueye.BL_COMPENSATION_DISABLE, 0)
        rv=self.cam.SetBlCompensation(ueye.GET_BL_SUPPORTED_MODE, 0)
        
        if rv & ueye.BL_COMPENSATION_ENABLE:
            self.cbAutoBL.Enable()
        else:
            self.cbAutoBL.Disable()
        
        rv=self.cam.SetBlCompensation(ueye.GET_BL_OFFSET,0)
        self.fcBlackLevel.SetValue(rv)
        
        rv=self.cam.SetBlCompensation(ueye.GET_BL_COMPENSATION,0)
        self.cbAutoBL.SetValue(bool(rv & ueye.BL_COMPENSATION_ENABLE))
        
        
    def __set_properties(self):
        # begin wxGlade: wxVidConfig.__set_properties
        self.SetTitle(u"Configuración")
        self.SetSize((800, 894))
        self.cbAutoFr.Enable(False)
        self.rbEdgeEnh.SetSelection(0)
        self.radio_box_2.SetSelection(0)
        self.cbPixFormat.SetSelection(3)
        self.rbHFBin.SetSelection(0)
        self.rbHFSub.SetSelection(0)
        self.rbVFBin.SetSelection(0)
        self.rbVFSub.SetSelection(0)
        self.radio_box_1.SetSelection(0)
        self.radio_box_3.SetSelection(0)
        self.combo_box_2.SetSelection(0)
        self.radio_box_4.SetSelection(0)
        # end wxGlade


    def __do_layout(self):
        # begin wxGlade: wxVidConfig.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_27 = wx.BoxSizer(wx.VERTICAL)
        sizer_30 = wx.StaticBoxSizer(self.sizer_30_staticbox, wx.VERTICAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.StaticBoxSizer(self.sizer_34_staticbox, wx.VERTICAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_28 = wx.StaticBoxSizer(self.sizer_28_staticbox, wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.VERTICAL)
        sizer_37 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.StaticBoxSizer(self.sizer_24_staticbox, wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.VERTICAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_21_copy = wx.StaticBoxSizer(self.sizer_21_copy_staticbox, wx.VERTICAL)
        sizer_21 = wx.StaticBoxSizer(self.sizer_21_staticbox, wx.VERTICAL)
        sizer_17 = wx.StaticBoxSizer(self.sizer_17_staticbox, wx.HORIZONTAL)
        sizer_20 = wx.BoxSizer(wx.VERTICAL)
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_22 = wx.StaticBoxSizer(self.sizer_22_staticbox, wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.StaticBoxSizer(self.sizer_15_staticbox, wx.VERTICAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_13 = wx.BoxSizer(wx.VERTICAL)
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.StaticBoxSizer(self.sizer_10_staticbox, wx.VERTICAL)
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.VERTICAL)
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.VERTICAL)
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.VERTICAL)
        sizer_7.Add(self.fcPixelClock, 0, wx.EXPAND, 0)
        sizer_5.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_8.Add(self.fcFrameRate, 0, wx.EXPAND, 0)
        sizer_8.Add(self.cbAutoFr, 0, 0, 0)
        sizer_5.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_9.Add(self.fcExpo, 0, wx.EXPAND, 0)
        sizer_9.Add(self.cbAutoExp, 0, 0, 0)
        sizer_5.Add(sizer_9, 1, wx.EXPAND, 0)
        self.nbCamara.SetSizer(sizer_5)
        sizer_4.Add(self.fcMasterGain, 0, wx.EXPAND, 0)
        sizer_6.Add(self.cbAutoMG, 0, 0, 0)
        sizer_6.Add(self.cbGBMG, 0, 0, 0)
        sizer_4.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
        sizer_10.Add(self.fcBlackLevel, 0, wx.EXPAND, 0)
        sizer_10.Add(self.cbAutoBL, 0, 0, 0)
        sizer_3.Add(sizer_10, 1, wx.EXPAND, 0)
        sizer_12.Add(self.label_1, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(self.label_2, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_12.Add(self.label_3, 1, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_11.Add(sizer_12, 0, wx.EXPAND, 0)
        sizer_13.Add(self.fcRedGain, 1, wx.EXPAND, 0)
        sizer_13.Add(self.fcGreenGain, 1, wx.EXPAND, 0)
        sizer_13.Add(self.fcBlueGain, 1, wx.EXPAND, 0)
        sizer_11.Add(sizer_13, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_11, 1, wx.EXPAND, 0)
        sizer_15.Add(self.cbSoftGamma, 0, 0, 0)
        sizer_15.Add(self.cbHardGamma, 0, 0, 0)
        sizer_15.Add(self.cbHotPixCor, 0, 0, 0)
        sizer_14.Add(sizer_15, 1, wx.EXPAND, 0)
        sizer_14.Add(self.rbEdgeEnh, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_14, 1, wx.EXPAND, 0)
        sizer_22.Add(self.radio_box_2, 0, wx.ALIGN_BOTTOM, 0)
        sizer_22.Add(self.cbPixFormat, 0, wx.ALIGN_BOTTOM, 0)
        sizer_3.Add(sizer_22, 0, wx.EXPAND, 0)
        self.nbImagen.SetSizer(sizer_3)
        sizer_19.Add(self.label_4, 1, 0, 0)
        sizer_19.Add(self.label_5, 1, 0, 0)
        sizer_19.Add(self.label_6, 1, 0, 0)
        sizer_19.Add(self.label_7, 1, 0, 1)
        sizer_17.Add(sizer_19, 0, wx.EXPAND, 0)
        sizer_20.Add(self.fcAOIw, 1, wx.EXPAND, 0)
        sizer_20.Add(self.fcAOIh, 1, wx.EXPAND, 0)
        sizer_20.Add(self.fcAOIl, 1, wx.EXPAND, 0)
        sizer_20.Add(self.fcAOIr, 1, wx.EXPAND, 0)
        sizer_17.Add(sizer_20, 1, wx.EXPAND, 0)
        sizer_16.Add(sizer_17, 0, wx.EXPAND, 0)
        sizer_21.Add(self.cbHFM, 0, 0, 0)
        sizer_21.Add(self.rbHFBin, 0, wx.EXPAND, 0)
        sizer_21.Add(self.rbHFSub, 0, wx.EXPAND, 0)
        sizer_18.Add(sizer_21, 1, wx.EXPAND, 0)
        sizer_21_copy.Add(self.cbVFM, 0, 0, 0)
        sizer_21_copy.Add(self.rbVFBin, 0, wx.EXPAND, 0)
        sizer_21_copy.Add(self.rbVFSub, 0, wx.EXPAND, 0)
        sizer_18.Add(sizer_21_copy, 1, wx.EXPAND, 0)
        sizer_16.Add(sizer_18, 1, wx.EXPAND, 0)
        self.nbTamano.SetSizer(sizer_16)
        sizer_26.Add(self.radio_box_1, 0, 0, 0)
        sizer_26.Add(self.radio_box_3, 0, 0, 0)
        sizer_25.Add(sizer_26, 1, wx.EXPAND, 0)
        sizer_24.Add(self.combo_box_2, 0, 0, 0)
        sizer_25.Add(sizer_24, 1, wx.EXPAND, 0)
        sizer_23.Add(sizer_25, 1, wx.EXPAND, 0)
        self.nbProcIm.SetSizer(sizer_23)
        sizer_36.Add(self.button_1, 0, 0, 0)
        sizer_36.Add(self.button_2, 0, 0, 0)
        sizer_31.Add(sizer_36, 1, wx.EXPAND, 0)
        sizer_37.Add(self.label_8, 0, 0, 0)
        sizer_37.Add(self.window_1, 1, wx.EXPAND, 0)
        sizer_31.Add(sizer_37, 1, wx.EXPAND, 0)
        sizer_31.Add(self.checkbox_1, 0, 0, 0)
        sizer_28.Add(sizer_31, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_28, 0, wx.EXPAND, 0)
        sizer_35.Add(self.radio_box_4, 0, 0, 0)
        sizer_35.Add(self.button_3, 1, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_34.Add(sizer_35, 0, wx.EXPAND, 0)
        sizer_38.Add(self.label_9, 0, 0, 0)
        sizer_38.Add(self.window_1_copy, 1, wx.EXPAND, 0)
        sizer_34.Add(sizer_38, 0, wx.EXPAND, 0)
        sizer_39.Add(self.label_10, 0, 0, 0)
        sizer_39.Add(self.window_1_copy_1, 1, wx.EXPAND, 0)
        sizer_34.Add(sizer_39, 0, wx.EXPAND, 0)
        sizer_27.Add(sizer_34, 0, wx.EXPAND, 0)
        sizer_30.Add(self.text_ctrl_1, 0, wx.EXPAND, 0)
        sizer_40.Add(self.button_4, 0, 0, 0)
        sizer_40.Add(self.button_5, 0, 0, 0)
        sizer_30.Add(sizer_40, 1, wx.EXPAND, 0)
        sizer_27.Add(sizer_30, 0, wx.EXPAND, 0)
        self.nbES.SetSizer(sizer_27)
        self.notebook.AddPage(self.nbCamara, u"Cámara")
        self.notebook.AddPage(self.nbImagen, u"Imágen")
        self.notebook.AddPage(self.nbTamano, u"Tamaño")
        self.notebook.AddPage(self.nbProcIm, u"Proc. Imágen")
        self.notebook.AddPage(self.nbES, "Ent./Sal.")
        sizer_1.Add(self.notebook, 1, wx.EXPAND, 0)
        sizer_2.Add(self.btnOK, 0, 0, 0)
        sizer_2.Add(self.btnCancel, 0, 0, 0)
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
    def OnChangeMG(self,event):
        MG=event.GetValue()
        rv=self.cam.SetHardwareGain(MG, ueye.IGNORE_PARAMETER, ueye.IGNORE_PARAMETER, ueye.IGNORE_PARAMETER)
    
    def OnChangePC(self, event):
        pc= event.GetValue()
        rv=self.cam.SetPixelClock(pc)
        #self.__get_cam_info()
        
        pnMin, pnMax,interv=self.cam.GetFrameTimeRange()
        self.fcFrameRate.SetMin(1/pnMax)
        self.fcFrameRate.SetMax(1/pnMin)
        self.fcFrameRate.SetSteps(1000*int((pnMax-pnMin)/interv))
        
        rv=self.cam.SetFrameRate(ueye.GET_FRAMERATE)
        self.fcFrameRate.SetValue(rv)
    
        pnMin, pnMax,interv=self.cam.GetExposureRange()
        self.fcExpo.SetMin(pnMin)
        self.fcExpo.SetMax(pnMax)
        self.fcExpo.SetSteps(int((pnMax-pnMin)/interv))
        rv=self.cam.SetExposureTime(ueye.GET_EXPOSURE_TIME)
        self.fcExpo.SetValue(rv)
        
    def OnChangeFR(self, event):
        pc= event.GetValue()
        rv=self.cam.SetFrameRate(pc)
        #self.__get_cam_info()
        
    
    def OnChangeEx(self, event):
        pc= event.GetValue()
        rv=self.cam.SetExposureTime(pc)
        #self.__get_cam_info()
    
    
    def OnClose(self, event):
        pass
        #self.Destroy()
    def OnAutoExpo(self, event): # wxGlade: wxVidConfig.<event_handler>
        if event.Checked():
            rv=self.cam.SetExposureTime(ueye.SET_ENABLE_AUTO_SHUTTER)
            self.fcExpo.Disable()
        else:
            rv=self.cam.SetExposureTime(ueye.GET_EXPOSURE_TIME)
            rv=self.cam.SetExposureTime(rv)
            self.__get_cam_info()
            self.fcExpo.Enable()
        

    def OnMGAuto(self, event): # wxGlade: wxVidConfig.<event_handler>
        
        self.cam.SetAutoParameter(ueye.SET_ENABLE_AUTO_GAIN,event.Checked(),0)
        
    def OnMGGB(self, event): # wxGlade: wxVidConfig.<event_handler>
        """
        Set MasterGain Gain boost
        """
        if event.Checked():
            rv=self.cam.SetGainBoost(ueye.SET_GAINBOOST_ON)
        else:
            rv=self.cam.SetGainBoost(ueye.SET_GAINBOOST_OFF)
        
        
    def OnBLAuto(self, event): # wxGlade: wxVidConfig.<event_handler>
    
        if event.Checked():
            self.cam.SetBlCompensation(ueye.BL_COMPENSATION_ENABLE,ueye.IGNORE_PARAMETER)
        else:
            self.cam.SetBlCompensation(ueye.BL_COMPENSATION_DISABLE,ueye.IGNORE_PARAMETER)
        
    def OnChangeBL(self, event): 
        pc= event.GetValue()
        rv=self.cam.SetBlCompensation(ueye.IGNORE_PARAMETER,pc)
        
    def OnSoftGamma(self, event): # wxGlade: wxVidConfig.<event_handler>
        print "Event handler `OnSoftGamma' not implemented"
        event.Skip()

    def OnHardGamma(self, event): # wxGlade: wxVidConfig.<event_handler>
        print "Event handler `OnHardGamma' not implemented"
        event.Skip()

    def OnHotPixCor(self, event): # wxGlade: wxVidConfig.<event_handler>
        print "Event handler `OnHotPixCor' not implemented"
        event.Skip()

    def OnEdgeEn(self, event): # wxGlade: wxVidConfig.<event_handler>
        print "Event handler `OnEdgeEn' not implemented"
        event.Skip()

# end of class wxVidConfig


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    cfg_dialog = wxVidConfig(None, -1, "")
    app.SetTopWindow(cfg_dialog)
    cfg_dialog.Show()
    app.MainLoop()
